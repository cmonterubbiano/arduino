/*
 * Allarme volumetrico pin 7 
 */
 
#include <SPI.h>

boolean ledStatus;

char* on = "ON";
char* off = "OFF";
char* home = "HOME";
char* aiuto = "AIUTO";
char* test = "TEST";
char* test_h = "TEST_HOME";

char* statusLabel;
char* colorLabel;

int pir1Pin =14;  // Input for HC-S501 il pin 14 -> A0 come digitale terrazzo garibaldi
int pir2Pin =15;  // Input for HC-S501 il pin 15 -> A1 come digitale finestra bagno
int pir3Pin =16;  // Input for HC-S501 il pin 16 -> A2 come digitale terrazzo giardino
int pir4Pin =17;  // Input for HC-S501 il pin 17 -> A3 come digitale corridoio camere
int pir5Pin =18;  // Input for HC-S501 il pin 18 -> A4 come digitale corridoio ingresso

int ledPin =9;  // LED stato generale
int ledHin =5;  // LED stato home
int ledOin =6;  // LED stato acceso

int int1Pin =8;   // Controllo cavo pir 1 integro 0 interrotto garibaldi
int int2Pin =7;   // Controllo cavo pir 1 integro 0 interrotto bagno
int int3Pin =4;   // Controllo cavo pir 1 integro 0 interrotto giardino

int pirPin;     // Pir incriminato
int intPin;     // Filo interrotto

int valled;

int pirValue; // Place to store read PIR Value
int incorso;
long  tempo_disattivo =180000L;  // Tempo in millisecondi di interdizione dopo allarme

byte  a_status	=0;									//status allarme    0 spento 1 acceso 2 in allarme

String	inputString = "";         // a string to hold incoming data
boolean	stringComplete = false;  // whether the string is complete

void setup()
{
  Serial.begin(9600);
  Serial.println("Allarme");

  pinMode(ledPin, OUTPUT);
  pinMode(ledHin, OUTPUT);
  pinMode(ledOin, OUTPUT);
  pinMode(pir1Pin, INPUT);
  pinMode(pir2Pin, INPUT);
  pinMode(pir3Pin, INPUT);
  pinMode(pir4Pin, INPUT);
  pinMode(pir5Pin, INPUT);
  pinMode(int1Pin, INPUT);
  pinMode(int2Pin, INPUT);
  pinMode(int3Pin, INPUT);
 
  digitalWrite(ledPin, LOW);
  digitalWrite(ledHin, LOW);
  digitalWrite(ledOin, LOW);

  delay(10000);

  ledStatus = false;
  statusLabel = off;
  Serial.println("arduino|allarme|status|SPENTO");
  Serial.println("arduino_allarme|SPENTO|.");
}

int stato;
long  inizio_all;

void loop()
{ 
	if (incorso
	&& (millis() < inizio_all || ((millis() -inizio_all) >=tempo_disattivo)))
	{
		Serial.println(millis());
		Serial.println(inizio_all);
		Serial.println("Controllo attivo");
		incorso =0;
	}
  	serialEvent(); //call the function
	// print the string when a newline arrives:
	
	if (stringComplete)
	{
		int ix;
		int iy;
		int	iz;
		char	appo[100];
		int		stanza =-1;
		int		comando =-1;
		Serial.println(inputString);
		for(ix =iy =iz =0; ix <inputString.length(); ix++, iz++)
		{
			//	raspberry|allarme|APRI
			if (inputString[ix] =='|')
			{
				iy++;
				appo[iz] ='\0';
				if (iy == 1)
				{
					if (strcmp(appo, "raspberry"))
						break;
				}
				if (iy == 2)
				{
					if (!strcmp(appo, "allarme"))
						stanza =7;
					
					if (stanza <0)
						break;
				}
				iz =-1;
			}
			else	appo[iz] =inputString[ix];
		}
		iy++;
		if (ix ==inputString.length())
		{
			appo[iz] ='\0';
			
			if (iy == 3)
			{
				if (!strcmp(appo, "APRI"))
					comando =0;
				else
					if (!strcmp(appo, "CHIUDI"))
					comando =1;
				else
					if (!strcmp(appo, "HOME"))
					comando =2;
				else
					if (!strcmp(appo, "AIUTO"))
					comando =3;
				else
					if (!strcmp(appo, "TEST"))
					comando =4;
				else
					if (!strcmp(appo, "TEST_HOME"))
					comando =5;

				if (comando != -1)
					Serial.println(inputString);
			}
		}
		inputString = "";
		stringComplete = false;
		if (stanza != -1 && comando != -1)
		{
			Serial.print("arduino|");
			Serial.print("allarme|");
			Serial.print("status|");

			if (stanza ==7 && !comando)
			{
					Serial.println("ACCESO");
					statusLabel = on;
					Serial.println("arduino_allarme|ACCESO|.");
			}
			else	if (stanza ==7 && comando ==1)
			{
					Serial.println("SPENTO");
					statusLabel = off;
					Serial.println("arduino_allarme|SPENTO|.");
			}
			else	if (stanza ==7 && comando ==2)
			{
					Serial.println("HOME");
					statusLabel = home;
					Serial.println("arduino_allarme|HOME|.");
			}
			else	if (stanza ==7 && comando ==3)
			{
					Serial.println("AIUTO");
					Serial.println("arduino_allarme|IN ALLARME|Richiesta di AIUTO");
					a_status =2;
					statusLabel = aiuto;
			}
			else	if (stanza ==7 && comando ==4)
			{
					Serial.println("TEST");
					statusLabel = test;
					Serial.println("arduino_allarme|TEST|.");
			}
			else	if (stanza ==7 && comando ==5)
			{
					Serial.println("TEST_HOME");
					statusLabel = test_h;
					Serial.println("arduino_allarme|TEST_HOME|.");
			}

		}
	}
  
  	if(!strcmp(statusLabel, on))
	{
		ledStatus = true;
		valled =128;
		analogWrite(ledOin, 128);
		digitalWrite(ledHin, LOW);
	}

  	if(!strcmp(statusLabel, home))	
	{
		ledStatus = true;
		valled =64;
		analogWrite(ledHin, 200);
		digitalWrite(ledOin, LOW);
	}

	if(!strcmp(statusLabel, off)
	|| !strcmp(statusLabel, test)
	|| !strcmp(statusLabel, test_h))
		ledStatus = false;
	
	if(ledStatus)
	{
		analogWrite(ledPin, valled);
		if (!strcmp(statusLabel, home))
				colorLabel = "green";
		else	colorLabel = "red";
	}
	else
	{
		digitalWrite(ledPin, LOW);
		digitalWrite(ledHin, LOW);
		digitalWrite(ledOin, LOW);
		colorLabel = "black";
	}
  
	pirPin =intPin =0;
  
	pirValue = digitalRead(pir1Pin);
	if (pirValue)
	pirPin =1;
	if (!pirPin)
	{
		pirValue = digitalRead(pir2Pin);
		if (pirValue)
		pirPin =2;
	}
	if (!pirPin)
	{
		pirValue = digitalRead(pir3Pin);
		if (pirValue)
		pirPin =3;
	}
	if (!pirPin && strcmp(statusLabel, home) && strcmp(statusLabel, test_h))
	{
		pirValue = digitalRead(pir4Pin);
		if (pirValue)
		pirPin =4;
	}
	if (!pirPin && strcmp(statusLabel, home) && strcmp(statusLabel, test_h))
	{
		pirValue = digitalRead(pir5Pin);
		if (pirValue)
		pirPin =5;
	}
// Controllo integrita' fili pir esterni	
	if (!digitalRead(int1Pin))
		intPin =1;
	if (!intPin && !digitalRead(int2Pin))
		intPin =2;
	if (!intPin && !digitalRead(int3Pin))
		intPin =3;

  if (!incorso
  && (stato != pirValue || intPin)) 
  {
    if (intPin)
      pirValue =HIGH;
    
    stato =pirValue;
    if (pirValue)
    {
      int i;
      char appo[20];
	  
	  *appo ='\0';

      switch(pirPin)
      {
        case 1:
            sprintf(appo, "%s", "PIR -> Garibaldi");
            break;
        case 2:
            sprintf(appo, "%s", "PIR -> Garage");
            break;
        case 3:
            sprintf(appo, "%s", "PIR -> Giardino");
            break;
        case 4:
            sprintf(appo, "%s", "PIR -> Ingresso");
            break;
        case 5:
            sprintf(appo, "%s", "PIR -> Camere");
            break;
      }

      switch(intPin)
      {
        case 1:
            sprintf(appo, "%s", "Filo -> Garibaldi");
            break;
        case 2:
            sprintf(appo, "%s", "Filo -> Garage");
            break;
        case 3:
            sprintf(appo, "%", "Filo -> Giardino");
            break;
      }
	  Serial.println(appo);
      for(i=0; i<50; i++)// Wen a frequency sound
      {
        analogWrite(ledPin, 128);
        delay(1);//delay 1ms
        digitalWrite(ledPin, LOW);
        delay(100);// delay 1ms
      }
      if (ledStatus && !incorso)
      {
        inizio_all =millis();
        incorso =1;
		Serial.println("arduino|allarme|status|ALLARME IN CORSO");
		Serial.print("arduino_allarme|IN ALLARME|");
		Serial.println(appo);
      }
		else	if(!strcmp(statusLabel, test)
				|| !strcmp(statusLabel, test_h))
		{
			inizio_all =millis();
			incorso =1;
			Serial.print("arduino_allarme|IN TEST|");
			Serial.println(appo);
		}
    }
    else  Serial.println(F("Spento"));
  }
}

void serialEvent()
{
	while (Serial.available())
	{
		// get the new byte:
		char inChar = (char)Serial.read();
		// if the incoming character is a newline, set a flag
		// so the main loop can do something about it:
		if (inChar == '\n' || inChar == '\r')
		{
			inputString += "";
			stringComplete = true;
		}
		else	inputString += inChar;	// add it to the inputString:
	}
}
